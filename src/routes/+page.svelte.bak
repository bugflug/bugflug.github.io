<div id="page">
    <div id="splash-wrapper" out:comeinfade={{ duration: 300 }}>
        <!-- svelte-ignore a11y-no-static-element-interactions -->
        <!-- svelte-ignore a11y-click-events-have-key-events -->
        <div id="splash" on:click={generate}>
            {#each chars as { char, color } , i}
                <!-- svelte-ignore a11y-mouse-events-have-key-events -->
                <span style="
                    animation-delay: {i * 100}ms;
                    color: rgb(255,0  ,0  );"
                on:mouseenter|stopPropagation={randomColor}
                >{char}</span>
            {/each}
        </div>
    </div>

    <div id="links-wrapper" transition:slidefade={{ direction: 'up' }}>
        <div id="links">
            {#each links as { name, href }}
                <a class="fancy" href="https://{href}">{name}</a>
            {/each}
        </div>
    </div>
</div>

<style>
    #page {
        /* display */
        position: relative;
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 45vh 1fr;
        gap: 8rem;

        /* size */
        height: 100vh;

        /* background */
        background: none;
    }

    #splash-wrapper {
        /* display */
        display: flex;
        justify-content: center;
        align-items: center;

        /* size */
        padding-top: 35vh;
    }

    #splash {
        /* font */
        font-size: 3rem;
        font-family: var(--font-serif);
        font-weight: 900;
        text-align: center;
        user-select: none;

        /* display */
        cursor: pointer;
        overflow: visible;

        text-shadow: 10px 10px white;

        /* size */
        max-width: 30vw;

        /* animation */
        animation: rotate 10s ease infinite;
    }

    #splash span {
        /* display */
        display: inline;
        position: relative;
        padding: 0 0 0.6em 0;
        top: 0em;

        /* animation */
        animation: bounce 5000ms ease infinite, come-in 100ms both 1;
        transition: color 200ms ease, top 150ms ease, opacity 200ms ease;

        /* test */
        text-shadow:
            1px 1px rgba(255,255,255,1),
            2px 2px rgba(255,255,255,0.9),
            3px 3px rgba(255,255,255,0.8),
            4px 4px rgba(255,255,255,0.7),
            5px 5px rgba(255,255,255,0.6),
            6px 6px rgba(255,255,255,0.5),
            7px 7px rgba(255,255,255,0.4),
            8px 8px rgba(255,255,255,0.3),
            9px 9px rgba(255,255,255,0.2),
            10px 10px rgba(255,255,255,0.1);
    }

    #links-wrapper {
        /* display */
        display: flex;
        justify-content: center;
    }

    #links {
        /* size */
        max-width: 24rem;

        /* font */
        font-weight: 800;

        /* display */
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1rem 1rem 1rem 1rem;
        gap: 0.5rem 4rem;
    }

    #links a {
        /* font */
        color: var(--text-3);
    }

    #links a:hover {
        /* font */
        color: var(--text-1);
    }

    #links a::after {
        /* display */
        left: calc(-0.3em - 1.5rem);
        bottom: 0.3em;
    }

    #links a:hover::after {
        /* display */
        left: calc(-0.3em - 1.5rem);

        /* size */
        width: 1.5rem;
    }

    @keyframes rotate {
        0% {
            transform: rotate(0.005turn);
        }

        50% {
            transform: rotate(-0.005turn);
        }

        100% {
            transform: rotate(0.005turn);
        }
    }

    @keyframes come-in {
        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

    @keyframes bounce {
        0% {
            top: 0em;
        }

        50% {
            top: 0.4em;
        }

        100% {
            top: 0em;
        }
    }
</style>

<script lang="ts">
    import { background } from '../store/background';
    import { slidefade, comeinfade } from '$lib/transition';
    import { onMount, onDestroy } from 'svelte';

    const links = [
        { name: 'youtube' , href: 'youtube.com/@bugflug'                              },
        { name: 'twitch'  , href: 'twitch.tv/bugflug'                                 },
        { name: 'steam'   , href: 'steamcommunity.com/id/bugflug'                     },
        { name: 'twitter' , href: 'twitter.com/bugflug'                               },
        { name: 'backpack', href: 'backpack.tf/classifieds?steamid=76561198081991204' }
    ]
    // const allColors = [
    //     '#ff306c',
    //     '#ad005f',
    //     '#e04f0b',
    //     '#ffa200',
    //     '#ffe74c',
    //     '#ebffd4',
    //     '#48ff00',
    //     '#00cf2d',
    //     '#31d4e0',
    //     '#006ec2',
    //     '#1629f7',
    //     '#450073',
    //     '#8e1cc7',
    //     '#f018f0'
    // ];

    const allColors = [
        '255, 45, 108',
        '173, 0, 95',
        '224, 79, 11',
        '255, 162, 0',
        '255, 231, 76',
        '235, 255, 212',
        '72, 255, 0',
        '0, 207, 45',
        '49, 212, 224',
        '0, 110, 194',
        '22, 41, 247',
        '69, 0, 115',
        '142, 28, 199',
        '240, 24, 240'
    ]

    let splashes: string[];
    let chars: { char: string, color: string }[] = [];

    onMount(() => {
        // fetch the splashes
        fetch('splash.txt').then(response => 
            response.text().then(text => {
                // split at new lines
                splashes = text.split(/\r?\n/);
                generate();
            })
        ).catch(() => {
            // default to 'bugflug'
            splashes = ['bugflug'];
            generate();
        });

        background.set('var(--bg-3)');
    });

    onDestroy(() => {
        background.set('none');
    });

    // generate chars :D
    const generate = () => {
        chars = [];

        let colors: string[] = [];

        // make sure the new selected splash is not the same as the last (by removing it)
        let splash: string;
        if (splashes.length > 0) {
            const rand = Math.floor(Math.random() * splashes.length);
            splash = splashes[rand];
            splashes.splice(rand, 1);
        } else {
            splash = '...'
        }

        // ensure we have enough colors for the entire splash
        while (colors.length < splash.length) colors = colors.concat(allColors);

        // fisher-yates array shuffle to randomize all colors
        colors.forEach((color, i) => {
            const rand = Math.floor(Math.random() * (i + 1));
            
            colors[i] = colors[rand];
            colors[rand] = color;
        })

        setTimeout(() => chars = splash.split('').map((char, i) => {
            return {
                char,
                color: colors[i]
            }
        }), 10);
    }

    // grab one random color and set it
    const randomColor = (event: any) => {
        const target = event.relatedTarget;

        // weird ass bug where it sometimes propogates onto other elements.
        // idkw hy this happens but just check this
        if (event.relatedTarget !== null) if (target.localName === 'span') {
            target.style.color = allColors[Math.floor(Math.random() * allColors.length)];
        }
    }
</script>